const dataAccess = (function () {
    const local = (function () {

        const localKey = 'drink-water';

        const addNewLog = () => {
            let registerdLogs = getAllItems();
            registerdLogs.push();
            localStorage.setItem(localKey, JSON.stringify(registerdLogs));
            console.log('Added to log: ');

        }

        const getAllItems = () => {
            return JSON.parse(localStorage.getItem(localKey)) || [];
        };

        const getProgressByDate = function (date) {
            return [
                // ['12:00', 100],
                // ['12:39', 200],
                // ['13:01', 300]
            ];
        }

        return {
            getProgressByDate: getProgressByDate
        };
    })();

    const api = (function () {
        // Moet dezelfde functies hebben als local !!!
        return {};
    })();

    return {
        local: local,
        api: api
    }
})();
class ProgressTracker {
    constructor(options) {
        // console.log("⚙", options, "⚙");

        this.options = options;

        this.percentageValue = 0;
        this.currentProgress = [] //dataAccess[this.options.mode].getProgressOfToday() || [];
        this.timerId = null;

        this.percentageRatio = 100 / this.options.dailyGoal;

        this.percentage = document.querySelector(`.${this.options.domRefs.percentage}`);
        this.timeStampHolder = document.querySelector(`.${this.options.domRefs.timeStampHolder}`);
        this.addButton = document.querySelector(`.${this.options.domRefs.addButton}`);

        this.currentGoalHolders = document.querySelectorAll(`.${this.options.domRefs.currentGoal}`);
        this.currentUnitsHolders = document.querySelectorAll(`.${this.options.domRefs.currentUnits}`);

        this.showUserOptions();
        this.restoreProgress();
        this.listenToNewLogging();
    };

    restoreProgress() {
        this.currentProgress = dataAccess[this.options.mode].getProgressByDate(new Date());

        for (const p of this.currentProgress) {
            this.updateProgress(p);
        }
    };

    updateProgress(newLogging = ['00:00', 0]) {
        // this.currentProgress.push(newLogging);
        this.showTimeStamp(newLogging[0]);

        const oldProgress = this.percentageValue,
            newProgress = oldProgress + newLogging[1] * this.percentageRatio;

        this.percentageValue = newProgress;

        let v = oldProgress;

        if (this.timerId) {
            clearInterval(this.timerId);
        }

        this.timerId = setInterval(() => {
            this.percentage.innerText = v;
            if (v >= newProgress) {
                clearInterval(this.timerId);
            }
            v++
        }, 32);

        this.options.afterUpdate(newProgress); // When finished, pass the new progress
    };

    showUserOptions() {
        for (const g of this.currentGoalHolders) {
            g.innerHTML = this.options.dailyGoal;
        };

        for (const u of this.currentUnitsHolders) {
            u.innerHTML = this.options.units;
        }
    };

    showTimeStamp(timeStamp) {
        this.timeStampHolder.innerHTML += `<li class="c-time-stamp">${timeStamp}</li>`;
    };

    listenToNewLogging() {
        this.addButton.addEventListener('click', () => {
            console.log("💦", this.addButton.dataset.amount, "💦");

            const now = new Date();
            const time = `${now.getHours()}:${now.getMinutes()}`;
            const amount = this.addButton.dataset.amount;

            this.updateProgress([time, amount]);
            // dataAccess[this.options.mode].saveLogging([time, amount]);
        });
    };
};
// Hoofdmodule
const uiBinding = (function () {
    // Submodules
    const wave = (function () {

        this.waveElement = null;

        const setup = function (waveClass) {
            this.waveElement = document.querySelector(`${waveClass}`);
        };

        const updateWaveHeight = function (newPercentage) {
            if (newPercentage > 100) newPercentage = 100;

            this.waveElement.style.transform = `translateY(${100 - newPercentage}%)`;
        };

        return {
            setup: setup,
            updateWaveHeight: updateWaveHeight
        }
    })();

    const logging = (function (buttonClass) {
        this.addButton;

        const setup = function () {
            this.addButton = document.querySelector(`.${this.buttonClass}`);
        };

        const enableAmountOptions = function () {
            this.addButton.addEventListener('click', function () {
                console.log(this.dataset);
            });
        };

        return {
            setup: setup,
            enableAmountOptions: enableAmountOptions
        }
    })();

    return {
        wave: wave,
        logging: logging
    }
})();
(function () {
	console.log('💧', 'https://www.youtube.com/watch?v=ARC1w1WWxGY');

	const options = {
		units: 'ml',
		dailyGoal: 2000,
		mode: 'local',
		domRefs: {
			percentage: 'js-amount',
			timeStampHolder: 'js-timestamps',
			addButton: 'js-log',
			currentGoal: 'js-goal',
			currentUnits: 'js-units'
		},
		afterUpdate: function (newPercentage) {
			uiBinding.wave.updateWaveHeight(newPercentage);
			console.log("It's been updated! 👍");
			console.log("Current progress: ", newPercentage, "%");
		}
	}

	document.addEventListener('DOMContentLoaded', () => {
		uiBinding.wave.setup('.js-waves'); // . NIET toegevoegd aan setup 
		uiBinding.logging.setup('js-log'); // . WEL toegevoegd aan setup

		// uiBinding.logging.enableAmountOptions();
		new ProgressTracker(options);
	});
})();